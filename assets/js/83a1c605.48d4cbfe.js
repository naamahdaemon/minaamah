"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1349],{9829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=t(5893),s=t(1151);const a={sidebar_position:13,sidebar_label:"Sending payout rewards to our chatbot",sidebar_class_name:"green"},i="Purpose",r={id:"Node operator guide/Telegram_bot/sending_payout",title:"Purpose",description:"In this section, we'll write a script that gets the owed rewards to the BP delegators each time a block is produced and send all due amounts along with delegators public key and memo field to the chatbot.",source:"@site/docs/03-Node operator guide/Telegram_bot/sending_payout.md",sourceDirName:"03-Node operator guide/Telegram_bot",slug:"/Node operator guide/Telegram_bot/sending_payout",permalink:"/docs/Node operator guide/Telegram_bot/sending_payout",draft:!1,unlisted:!1,editUrl:"https://github.com/naamahdaemon/minaamah/tree/main/docs/03-Node operator guide/Telegram_bot/sending_payout.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,sidebar_label:"Sending payout rewards to our chatbot",sidebar_class_name:"green"},sidebar:"mainSidebar",previous:{title:"Sending node uptime to our chatbot",permalink:"/docs/Node operator guide/Telegram_bot/sending_uptime"}},l={},c=[{value:"<code>get_payouts.sh</code>",id:"get_payoutssh",level:2},{value:"Using get_payouts.sh",id:"using-get_payoutssh",level:2},{value:"Sending generated output to telegram",id:"sending-generated-output-to-telegram",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"purpose",children:"Purpose"}),"\n",(0,o.jsxs)(n.p,{children:["In this section, we'll write a script that gets the owed rewards to the BP delegators each time a block is produced and send all due amounts along with delegators public key and memo field to the chatbot.\nFor this, we'll use the Mina Pool Payout script written by Jonathan (one of my Mina heroes \ud83d\ude0a) available here ",(0,o.jsx)(n.a,{href:"https://github.com/jrwashburn/mina-pool-payout",children:"https://github.com/jrwashburn/mina-pool-payout"})," then send the computed due rewards to our chatbot using the ",(0,o.jsx)(n.code,{children:"tg_logbot.sh"})," script we wrote in the previous chapter."]}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.mdxAdmonitionTitle,{}),(0,o.jsx)(n.p,{children:"This script is a bit more complex that the previous one but the principles remains exaclty the same"})]}),"\n",(0,o.jsx)(n.h2,{id:"get_payoutssh",children:(0,o.jsx)(n.code,{children:"get_payouts.sh"})}),"\n",(0,o.jsxs)(n.p,{children:["The following script needs to be adapted to your configuration.",(0,o.jsx)(n.br,{}),"\n","In the example below, it assumes that :"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"~/mina_scripts/payout/mina-pool-payout is the path to the mina_pool_payout script"}),"\n",(0,o.jsx)(n.li,{children:"~/mina_scripts/payout.log will get the formatted payouts resulting from the payout script execution"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ vim get_payouts.sh\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nif [[ ( $@ == "--help") ||  $@ == "-h" ]]\nthen\n        echo "Usage: $0 [starting block] [end block] [epoch]"\n        exit 0\nfi\n\nsblock=$1\neblock=$2\nepoch=$3\n\nexport POOL_MEMO="&lt;Bp_discord_id&gt;_epoch${epoch}_payout"\n\nnepoch=$epoch\nnsblock=$sblock\nneblock=$eblock\n\nif [ "$sblock" != "" ]; then\n        sblock="-m=$sblock"\nfi\n\nif [ "$eblock" != "" ]; then\n        eblock="-x=$eblock"\nfi\n\nif [ "$epoch" != "" ]; then\n        epoch="-e=$epoch"\n        sblock=""\n        eblock=""\nfi\n\ndebug=0\ninterval=3600\n\nwhile true\ndo\n        # On lance le script de payout\n        po="timeout 300 npm --prefix ~/mina_scripts/payout/mina-pool-payout/ run payout -- $sblock $eblock $epoch >/dev/null 2>&1"\n        echo "$po"\n\n        $po=$(eval "$po")\n\n        # get last transaction file name\n        fn=$(find ~/mina_scripts/payout/mina-pool-payout/src/data -name \'payout_transactions*\' -type f -exec ls -t1 {} + 2>/dev/null | head -n 1)\n        echo "$fn"\n\n        echo "Le dernier fichier de payout est : $fn"\n\n        # Extract the substring between the last \'_\' and the last \'.\'\n        lastblock=$(echo "$fn" | grep -o \'_[^_]*\\.\')\n\n        # Remove the \'_\' at the beginning and the \'.\' at the end of the substring\n        lastblock=${lastblock#_}\n        lastblock=${lastblock%.}\n\n        echo "lastblock: $lastblock"\n\n        sblock="-m=$lastblock"\n        epoch=""\n        eblock=""\n\n\n        echo -ne "\\\\n"\n\n        # get the last generated payout transaction file json\n        tr="find ~/mina_scripts/payout/mina-pool-payout/src/data -name \'payout_transactions*\' -type f -exec ls -t1 {} + 2>/dev/null | head -n 1 | xargs cat | jq ."\n\n        if [ "$debug" == "1" ]; then\n                echo "$tr"\n        fi\n        #echo -ne "\\\\n"\n\n        tr=$(eval "$tr")\n\n        compte=$(echo "$tr" | jq \'. | length\')\n\n        if [ "$debug" == "1" ]; then\n                echo "$tr"\n        fi\n        echo "$compte payout \xe0 effectuer"\n\n        if [ "$compte" != "0" ]; then\n                echo -e "Mina Epoch $nepoch$nsblock$neblock Payouts" >> ~/mina_scripts/payout.log\n        fi\n\n        #exit 0\n\n\n        for row in $(echo "${tr}" | jq -r \'.[] | @base64\'); do\n                _jq() {\n                 echo ${row} | base64 --decode |  jq -r ${1}\n                }\n           pk=$(_jq \'.publicKey\')\n           amount=$(_jq \'.amount\')\n           fee=$(_jq \'.feeMina\')\n           memo=$(_jq \'.memo\')\n           fee=0\n           amount=$(echo "scale=9 ;($amount + $fee)/1000000000" | bc)\n           echo -e "$pk\\\\n$amount\\\\n$memo" >> ~/mina_scripts/payout.log\n        done\n\n        sleep $interval\ndone\n'})}),"\n",(0,o.jsx)(n.p,{children:"Once launched, this script will loop every hour, will check if some new payouts have been computed using the payout script from the last block it was launched before (so that only new payouts are returned and will be sent to the telegram bot)."}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.mdxAdmonitionTitle,{}),(0,o.jsxs)(n.p,{children:["The script do not send the telegram message directly. Instead of that, it will add some entries to a ",(0,o.jsx)(n.code,{children:"payout.log"})," file and ",(0,o.jsx)(n.strong,{children:"this is exactly the only thing this script does !"}),".",(0,o.jsx)(n.br,{}),"\n","The payout.log file will then be tailed in background to the ",(0,o.jsx)(n.code,{children:"tg_logbot.sh"})," script so each time a new payout is added to ",(0,o.jsx)(n.code,{children:"payout.log"})," it will be sent to the telegram bot."]})]}),"\n",(0,o.jsx)(n.admonition,{title:"Sample payout.log file",type:"tip",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Mina Epoch 70 Payouts\nB62...\n2222.222222222\n26192608020F76108A141C0C79366D9D\nB62...\n1111.111111111\n26192608020F76108A141C0C79366D9D\nB62...\n33.333333333\nPayout_Memo\nB62qiburnzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzmp7r7UN6X\n3600.000000000\n26192608020F76108A141C0C79366D9D\n"})})}),"\n",(0,o.jsx)(n.h2,{id:"using-get_payoutssh",children:"Using get_payouts.sh"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"get_payouts.sh"})," script can take either the starting epoch as argument or the start date and/or end date."]}),"\n",(0,o.jsx)(n.admonition,{title:"example",type:"info",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'$ ./get_payouts.sh "" "" "70"\n'})})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsx)(n.mdxAdmonitionTitle,{}),(0,o.jsx)(n.p,{children:"This script above will get payout from epoch 70 and then, as long as the script keeps running, all the payouts that will occur after the last block read.\nNote that if more than one block is produced between two runs in the loop, then all blocks will be taken into account in the computed results."})]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"Ledgers (staking and next) have to be refreshed manually at the beginning of each new epoch (see Mina Pool Payout script documentation)."})}),"\n",(0,o.jsxs)(n.p,{children:["In order for the script to run in the backbround you can either use ",(0,o.jsx)(n.code,{children:"nohup"})," along with ",(0,o.jsx)(n.code,{children:"&"})," such as"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'$ nohup ./get_payouts.sh "" "" "70" &\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Or my prefered method, launch the same in a ",(0,o.jsx)(n.code,{children:"screen"})," session :"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'$ screen -S payout\n$ ./get_payouts.sh "" "" "70"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Then safely detach the screen session with ",(0,o.jsx)(n.code,{children:"CTRL+A+D"}),".",(0,o.jsx)(n.br,{}),"\n","You can easily reattach the screen session with ",(0,o.jsx)(n.code,{children:"screen -R uptime"})," thereafter."]}),"\n",(0,o.jsx)(n.admonition,{title:"Reminder",type:"tip",children:(0,o.jsxs)(n.p,{children:["Remember that the script only adds payout in a formatted way to the ",(0,o.jsx)(n.code,{children:"payout.log"})," file and that it does not send anything to telegram."]})}),"\n",(0,o.jsx)(n.h2,{id:"sending-generated-output-to-telegram",children:"Sending generated output to telegram"}),"\n",(0,o.jsxs)(n.p,{children:["The last step, once the ",(0,o.jsx)(n.code,{children:"get_payouts.sh"})," script runs in the background is to tail in another screen or background process the content of the ",(0,o.jsx)(n.code,{children:"payout.log"})," file to the ",(0,o.jsx)(n.code,{children:"tg_logbot.sh"})," script that will send our payout messages to our telegram bot private channel."]}),"\n",(0,o.jsxs)(n.p,{children:["For this, as usual, you can either use  ",(0,o.jsx)(n.code,{children:"nohup"})," along with ",(0,o.jsx)(n.code,{children:"&"})," such as"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ nohup tail -f payout.log | ./tg_logbot.sh &\n"})}),"\n",(0,o.jsxs)(n.p,{children:["or a new ",(0,o.jsx)(n.code,{children:"screen"})," session :"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ screen -S payout_log\n$ tail -f payout.log | ./tg_logbot.sh\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"You're done !!",type:"tip",children:(0,o.jsx)(n.p,{children:"Finally, once both the payout script and the tail of payout.log generated file will be in place, you will receive due payouts right in your telegram bot chat."})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>i});var o=t(7294);const s={},a=o.createContext(s);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);